{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"arduino_examples/","title":"Arduino Examples","text":"<p>Now that we have our library installed, we can get started playing around with our examples to learn more about how the IMU behaves. From there we'll be able to build our own custom code to integrate the sensor into a project.</p> <p>Note</p> <p>As of Arduino Library v1.0.3, the following line of code has been included for microcontrollers with built-in native USB (i.e. the SAMD51). This can be commented out when using the BNO086 in projects that are not using a Serial Terminal.</p> <p><pre><code>while(!Serial) delay(10); // Wait for Serial to become available.\n// Necessary for boards with native USB (like the SAMD51 Thing+).\n// For a final version of a project that does not need serial debug (or a USB cable plugged in),\n// Comment out this while loop, or it will prevent the remaining code from running.</code></pre></p>"},{"location":"arduino_examples/#example-1-rotation-vector","title":"Example 1 - Rotation Vector","text":"<p>This first example gets us started taking a reading of our complex valued rotation vector, or quaternion, which tells us how we are oriented. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_01_RotationVector.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>You should see an output of the quaternion values (i.e. i, j, k, and real) and the accuracy in radians.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"arduino_examples/#example-2-accelerometer","title":"Example 2 - Accelerometer","text":"<p>Examples 2 deals with pulling the accelerometer values from our sensor to figure out how it is moving. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_02_Accelerometer.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>You should see an output of the accelerometer values for x, y, and z in m/s<sup>2</sup>. If the breakout board is on the table with the z-axis pointed up to the ceiling, you should see a value close to the value of about +9.81 m/s. Of course, that value can vary depending on where you are on Earth](https://en.wikipedia.org/wiki/Gravity_of_Earth) or if the board is not fully rested on a flat table.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"arduino_examples/#example-3-gyro","title":"Example 3 - Gyro","text":"<p>In example 3, we'll pull values from the IMU's gyroscope to get a vector for our angular velocity. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_03_Gyro.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>You should see the angular velocity for x, y, and z in radians/s. Try rotating the board about each axis. You should see the values change depending on the direction that you rotate the board.</p> <p>Also, check out the values in a graph by opening the Serial Plotter to the same baud rate to see the readings from each gyroscope channel plotted against each other. Rotate the IMU and see how the values respond, I got the following output just letting the IMU swing on its cable.</p> <p>Note</p> <p>The range for the Arduino Serial Plotter along x-axis is a bit limited in Arduino IDE v2+ as opposed to previous versions like Arduino v1.8.19. There is a feature request relating to the Arduino Serial Plotter in the GitHub repo for the Arduino IDE. If you would like a bigger range, try opening the Arduino Serial Plotter in an older Arduino IDE like Arduino v1.8.19. Just make sure to adjust the baud rate to 115200.</p> <p> </p>"},{"location":"arduino_examples/#example-4-magnetometer","title":"Example 4 - Magnetometer","text":"<p>The following example will get us reading the component vectors for the magnetic field. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_04_Magnetometer.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>You should see the magnetometer values for x, y, and z in \u00b5Tesla and the accuracy. Try moving the magnetometer around aligning the sensor with the North Pole. You can also try placing a weak magnet near the sensor to see the values increase. In this case, I placed a weak magnet which increased the magnitude of the field along the z-axis.</p> Having a hard time seeing output? Click on the image for a closer look. <p>Warning</p> <p>Note that you will want to be careful about placing the sensor too close to a magnet (especially a strong magnet) as this can potentially damage the sensor.</p>"},{"location":"arduino_examples/#example-5-step-counter","title":"Example 5 - Step Counter","text":"<p>The BNO080 has some really neat built-in features due to its built in Cortex. One of these is a built in step counter. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_05_StepCounter.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>Try holding the sensor or attaching to your body while connect to a laptop and walk around. You should see a value close to the number of steps that you have taken. In this case, I just walked away from my table and back.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"arduino_examples/#example-6-stability-classifier","title":"Example 6 - Stability Classifier","text":"<p>This example sketch allows us to use the built-in stability classifier to figure out how stable the IMU is. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_06-StabilityClassifier.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>Give the BNO086 a second to measure and process the sensor values. The sensor will provide an output classifying an activity. In the output below, the sensor determined that the board was resting on a table... which it was! Amazing!</p> Having a hard time seeing output? Click on the image for a closer look. <p>As stated in the datasheet, the sensor uses both the accelerometer and gyroscope to determine the sensor's stability: on table, stationary, stable, motion. If the sensor does not know what is happening, the output will tell you that it was an \"unknown classification.\"</p>"},{"location":"arduino_examples/#example-7-activity-classifier","title":"Example 7 - Activity Classifier","text":"<p>The activity classifier is somewhat similar to the stability classifier in that it uses the on-board Cortex to determine what activity the IMU is doing. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_07_ActivityClassifier.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>Give the BNO086 a second to measure and process the sensor values. The sensor will provide an output classifying an activity and how confident it was. In the output below, the sensor determined that I was on the move and walking around my desk, which I was!</p> Having a hard time seeing output? Click on the image for a closer look. <p>The BNO086 can determine the following activities:</p> <ul> <li>In vehicle</li> <li>On bicycle</li> <li>On foot</li> <li>Still</li> <li>Tilting</li> <li>Walking</li> <li>Running</li> <li>On stairs</li> </ul> <p>If the sensor is not able to determine what is happening, the output will tell you that it was an \"Unknown.\"</p>"},{"location":"arduino_examples/#example-8-advanced-configuration","title":"Example 8 - Advanced Configuration","text":"<p>This example shows us how to configure the sensor on different addresses and I<sup>2</sup>C buses. Make sure to close the ADR jumper by adding a solder blob. You will also need to manually connect the I<sup>2</sup>C data and clock pins to the alternative port. For a quick test, you could use the Qwiic cable with breadboard jumpers to connect the breakout board to the RedBoard IoT - ESP32's header sockets. Of course, soldering wire directly to the PTH is better for a more secure connection.</p> RedBoard IoT - ESP32              VR IMU Breakout - BNO086              3.3V 3.3V GND GND SCL1 (D17) SCL SDA1 (D25) SDA A4 INT A5 RST <p>Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_08_AdvancedConfig.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"arduino_examples/#example-9-linear-accelerometer","title":"Example 9 - Linear Accelerometer","text":"<p>The following example is similar to example 2, however we are reading the linear acceleration. What does this mean? Well, it's acceleration with gravity (~9.8m/s<sup>2</sup>) removed from the data! Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_09_LinearAccelerometer.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"arduino_examples/#example-10-timestamp","title":"Example 10 - Timestamp","text":"<p>This example is pretty much like example 1. The difference is that we add a timestamp for each rotation vector. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_10_TimeStamp.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"arduino_examples/#example-11-raw-readings","title":"Example 11 - Raw Readings","text":"<p>This example shows how to output the raw acceleration, gyroscope, and magnetometer values. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_11_RawReadings.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"arduino_examples/#example-12-gyro-integrated-rotation-vector","title":"Example 12 - Gyro Integrated Rotation Vector","text":"<p>This example shows how to use the gyro integrated rotation vector. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_12-GyroIntegratedRotationVector.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"arduino_examples/#example-13-euler-angles","title":"Example 13 - Euler Angles","text":"<p>Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_13_EulerAngles.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"arduino_examples/#example-14-tare","title":"Example 14 - Tare","text":"<p>Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_14_Tare.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"arduino_examples/#example-15-gravity","title":"Example 15 - Gravity","text":"<p>Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_15_Gravity.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"arduino_examples/#example-16-uncalibrated-gyro","title":"Example 16 - Uncalibrated Gyro","text":"<p>Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_16_UncalibratedGyro.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"arduino_library/","title":"Installing the Arduino Library","text":"<p>Arduino</p> <p>The SparkFun VR IMU BNO08X Arduino Library provides a quick way to interact with the interfaces on the SparkFun VR IMU Breakout - BNO086 (Qwiic). Install the library through the Arduino Library Manager tool by searching for \"SparkFun BNO08X\". Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun VR IMU BNO08X Arduino Library (ZIP) <p>Note</p> <p>This library is different from the original BNO080 Arduino Library. Most of the examples from the old Arduino Library were ported to the BNO08X Arduino Library. We recommend using this library for the BNO08X as it processes the data better.</p>"},{"location":"arduino_library/#arduino-ide","title":"Arduino IDE","text":"<p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE and an library, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"arduino_library/#board-definitions","title":"Board Definitions","text":"<p>For the scope of this tutorial, we will be using the SparkFun IoT RedBoard - ESP32 Development Board. This Library also works with the SAMD51. For users that decide to use the SAMD51, make sure to use the Arduino SAMD Core and SparkFun SAMD boards before selecting the SAMD51 board definition.</p> <p>If you have not installed a board definition before, please review the following tutorial as well.</p> <ul> <li>Installing Board Definitions in the Arduino IDE</li> </ul>"},{"location":"arduino_library/#usb-to-serial-drivers","title":"USB-to-Serial Drivers","text":"<p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":"<p>Note</p> <p>Unfortunately, users are not able to use an Arduino Uno or RedBoard with an ATmega328P due the demands of the BNO086 IC. We recommend using the ESP32.</p> <p>The Arduino Library was also tested to work with the SAMD51 as well! The pin connections between the microcontroller and sensor are the same, just make sure to reference the port name rather than the specific Arduino pin number. Make sure to also install the Arduino SAMD core and select the correct board definition.</p>"},{"location":"hardware_hookup/#connecting-via-qwiic-port-reset-interrupt-pins","title":"Connecting via Qwiic Port, Reset, &amp; Interrupt Pins","text":"<p>Note</p> <p>As of v1.0.3, you will need to wire up the reset and interrupt pins. Using only the I<sup>2</sup>C port was not sufficient enough to get the BNO086 to work reliably with a microcontroller.  </p> <p>The I/O pins have also been changed for the reset and interrupt pins! Make sure to adjust your connections accordingly.</p> <p>You will need a powerful microcontroller to process the data when using the BNO086. In this case, we used an ESP32 (we specifically tested the Arduino Library with the SparkFun IoT RedBoard - ESP32). Besides connecting a Qwiic cable, you also need to wire up the reset and interrupt pins. This is a more reliable connection and is recommended.</p> <p>The table and image below shows the connections between the SparkFun IoT RedBoard - ESP32 and the BNO086. While you can use IC hooks for a temporary connection, we recommending soldering for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> RedBoard IoT - ESP32              VR IMU Breakout - BNO086              3.3V (3.3V, Qwiic Port) 3.3V GND (GND, Qwiic Port) GND SCL (D22, Qwiic Port) SCL SDA (D21, Qwiic Port) SDA A4 INT A5 RST <p>Note</p> <p>For users using a different communication protocol, make sure to adjust the solder joints for PS0 and PS1 before connecting to a UART or SPI port.</p>"},{"location":"hardware_hookup/#connecting-via-uart","title":"Connecting via UART","text":"<p>For users interested in using the serial UART protocol to communicate with the sensor through a computer's USB port, you can connect a serial-to-USB connector directly to the board.</p> <p>Before connecting, make sure to add a solder jumper on PS1 to configure the board for UART protocol as stated earlier in the Hardware Overview.</p> PS0              PS1              Interface              Note              0              0              I<sup>2</sup>C              1              0              UART-RVC              0 1 UART Add solder blob to the jumper to set to 1. 1              1              SPI              <p>The table below shows how to connect the VR IMU Breakout BNO086's UART port to a Serial Basic. You can angle header pins against the PTHs and hold the boards together with one hand for a temporary connection. However, we recommending soldering to the connection for a reliable and secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> VR IMU Breakout - BNO086              3.3V Serial Basic              Wire Color              GND GND BLK CTS 3V3 3.3V RXI TXO TXO RXI DTR GRN <p>Note</p> <p>You will need to be careful when soldering header pins to the edge pins and the UART located at the center of the board. For users that solder header pins to the edge of the board to mate with a breadboard, you will need to solder header pins facing the other way for the UART header so that the center pins do not connect to the same rails. The same goes with users that are using right angle header pins as well.</p> <p>Of course, you can cut a six wire jumper wire cable and wire strip them before connecting to the 1x6 header as well.</p> <p>The UART interface is in the middle of the board, with the black and green pins labeled as BLK and GRN. As stated earlier, these serial pins have been arranged to work with our Serial Basic board to make interfacing to a computer simple and fast. Once the header pins are soldered, align the GRN and BLK labels so that the serial connection is properly connected and slide the male header pins into the female header sockets.</p>"},{"location":"hardware_hookup/#connecting-via-spi","title":"Connecting via SPI","text":"<p>For users interested in using the SPI protocol to communicate with the sensor, there are few examples in the Arduino Library. You can use those examples as a basis to adjust the I<sup>2</sup>C examples to use it with SPI.</p> <p>Before connecting, make sure to add a solder jumper on PS0 and PS1 to configure the board for SPI protocol as stated earlier in the Hardware Overview.</p> <p>Note</p> <p>As of v1.0.3, the I/O pins have also been changed for the CS, reset, interrupt pins! Make sure to adjust your connections accordingly.</p> PS0              PS1              Interface              Note              0              0              I<sup>2</sup>C              1              0              UART-RVC              0              1              UART              1 1 SPI Add solder blob to the jumpers to set to 1. <p>The table below shows how to connect the SparkFun IoT RedBoard - ESP32 to the VR IMU Breakout BNO086's SPI port. As stated earlier for the I<sup>2</sup>C, you could use IC hooks for initial testing. However, we recommending soldering to the connection for a reliable and secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> RedBoard IoT - ESP32              VR IMU Breakout - BNO086              3.3V 3.3V GND GND D5 CS PICO (D23) SI POCI (D19) SO SCK (D18) SCK A4 INT A5 RST <p>Note</p> <p>For users that are connecting the BNO086 to a MicroMod Machine Learning Board and MicroMod Artemis Processor, you will need to redefine a few pins. We recommend redefining the following pins in the example code.</p> <pre><code>#define BNO08X_CS   PWM0\n#define BNO08X_INT  D0\n#define BNO08X_RST  D1\n</code></pre> <p>Note that SPI_CS on the MicroMod Machine Learning Board is only routed to the CS pin for the microSD card. D0 is also used as the CS pin for the on-board camera via SPI. D0 will work but if you are using a camera, then this would cause a conflict. A good alternative pin to use in this case would be PWM1.</p> <pre><code>#define BNO08X_CS   PWM0\n#define BNO08X_INT  PWM1\n#define BNO08X_RST  D1\n</code></pre> <p>Additionally, A0 and A1 are meant to be only used as input pins and for ADC. The MicroMod Artemis Processor has op amps and scaling from 3.3V to 3V on both of those analog pins.</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>Let's look over a few characteristics of the BNO086 sensor so we know a bit more about how it behaves. These characteristics were taken from the datasheet. For more information, make sure to check out the datasheet that is linked in the Resources section.</p> <ul> <li>I<sup>2</sup>C (Default): Up to 400kHz</li> <li>SPI: Up to 3MHz</li> <li>UART: 3Mbps</li> <li>Rotation Vector<ul> <li>Dynamic Error: 3.5\u00b0</li> <li>Static Error: 2.0\u00b0</li> </ul> </li> <li>Gaming Rotation Vector<ul> <li>Dynamic Error: 2.5\u00b0</li> <li>Static Error: 1.5\u00b0</li> <li>Dynamic Heading Drift: 0.5\u00b0 / min</li> </ul> </li> <li>Geomagnetic Rotation Vector<ul> <li>Dynamic Rotation Error: 4.5\u00b0</li> <li>Static Rotation Error: 3.0\u00b0</li> </ul> </li> <li>Gravity Angle Error: 1.5\u00b0</li> <li>Linear Acceleration Accuracy: 0.35m/s<sup>2</sup></li> <li>Accelerometer Accuracy: 0.3m/s<sup>2</sup></li> <li>Gyroscope Accuracy: 3.1\u00b0 / sec</li> <li>Magnetometer Accuracy: 1.4\u00b5T</li> </ul> <p>Note</p> <p>Keep in mind the location of the labels on the top and bottom of the board. When rotating the board about the x-axis to view the bottom labels, you will notice that the letters are not right side up. You will need to rotate the board about the y-axis to view the letters.  </p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>The operating voltage is between 2.4V-3.6V (note that V<sub>DDIO</sub> and V<sub>DD</sub> are tied together on the breakout board). We will assume that users will be using this with the Qwiic Connect System and a 3.3V microcontroller, which is typically 3.3V. We recommend matching the logic levels so that they are the same as the operating voltage (e.g. 3.3V).  You can apply 3.3V to the board from the 3V3 pin on either edge of the board, in the middle of the board, or either of the Qwiic connectors. There are also a few GND pins located throughout the board and via the Qwiic connectors.</p>"},{"location":"hardware_overview/#i2c-and-qwiic-connectors","title":"I<sup>2</sup>C and Qwiic Connectors","text":"<p>The board includes two Qwiic connectors on each side of the board. For users that need to solder directly to the board, the pins are also broken out on the edge PTH. The I<sup>2</sup>C data and clock lines are also tied to 2.2k\u03a9 pull-up resistors. The BNO086 supports standard fast mode and can communicate over this interface at up to 400kHz.</p> <p>The default address of the board is set to 0x4B. The alternative address is 0x4A. The protocol selection is also set for I<sup>2</sup>C by default. These can be adjusted based on the jumpers on the back of the board. For more information, check out the section about the jumpers.</p> <p>Note</p> <p>The timing for the BNO086 is finicky on the I<sup>2</sup>C port and the Arduino Library v1.0 does not currently support more than one BNO086 on the same line. We also do not recommend using a Qwiic Mux between the microcontroller and BNO086 to ensure that the packets are sent reliably.</p>"},{"location":"hardware_overview/#spi","title":"SPI","text":"<p>A few of the SPI pins have more than one function. We'll focus on the four SPI pins below. The image will also highlight the pins that are tied together.</p> <ul> <li>SO \u2014 This is an output pin for POCI (Peripheral Out, Controller In). The device sends data to the controller on this line. This is also connected to the I<sup>2</sup>C's SDA and UART's TXO pin.</li> <li>SI \u2014 This is an input pin for the PICO (Peripheral In, Controller Out). Device receives data from the microcontroller on this line. This is also connected to the address jumper. Tie to 3.3V to change I<sup>2</sup>C address from 0x4A to 0x4B.</li> <li>SCK \u2014 This is an input for the SPI clock. This is also connected to the I<sup>2</sup>C's SCL and UART's RXI pin.</li> <li>CS \u2014 This is an input for the SPI chip select pin and active low. It is used to as a clock signal to synchronize controller and peripheral.</li> </ul> <p>The protocol selection is set for I<sup>2</sup>C by default. You will need to adjust the jumpers on the back of the board for SPI. For more information, check out the section about the jumpers.</p> <p>Note</p> <p>You may not recognize the PICO/POCI labels for SPI pins. SparkFun has joined with other members of OSHWA in a resolution to move away from using \"Master\" and \"Slave\" to describe signals between the controller and the peripheral. Check out this pagefor more on our reasoning behind this change. You can also see OSHWA's resolution here.</p> <p>Note</p> <p>The Arduino Library is focused more on I<sup>2</sup>C compared to the SPI protocol. To browse a few of the examples that are available, make sure to check out the SPI folder after installing the Arduino Library.</p>"},{"location":"hardware_overview/#uart","title":"UART","text":"<p>In the middle of the board, are the serial UART pins. You can also use the UART interface at up to 3 Mbps or a simplified UART called UART-RVC (Used for Robotic Vacuum Cleaners) which can run at a data rate of 115200 kbps. These serial pins have been arranged to work with our Serial Basic board to make interfacing to a computer simple and fast.  This is for users that want to connect to a 3.3V UART-to-Serial converter (such as the Serial Basic Breakouts). The GRN and BLK labels help align the serial connection properly. The UART pins have more than one function. We'll focus on the two UART pins below. The image will also highlight the pins that are tied together.</p> <ul> <li>TXO \u2014 This is an output pin for serial UART transmit pin. Data is sent out to the microcontroller to this pin. This is also connected to the I<sup>2</sup>C's SDA and SPI's POCI pin.</li> <li>RXI \u2014 This is an input pin for the serial UART receive pin. Data is received from the microcontroller to this pin. This is also connected to the I<sup>2</sup>C's SCL and SPI's SCK pin.</li> </ul> <p>The protocol selection is set for I<sup>2</sup>C by default. You will need to adjust the jumpers on the back of the board for the serial UART. For more information, check out the section about the jumpers.</p>"},{"location":"hardware_overview/#reference-axis","title":"Reference Axis","text":"<p>For easy reference, we've documented the IMU's vectors with 3D Cartesian coordinate axes on the top and bottom side of the board. Make sure to orient and mount the board correctly so you know which way the BNO086's data is pointing. Remember, it's all relative.</p>"},{"location":"hardware_overview/#led","title":"LED","text":"<p>There is one LED on the board. The LED lights up when the board is powered with 3.3V. There is a jumper on the back if you decide to disable the LED.</p>"},{"location":"hardware_overview/#miscellaneous-pins","title":"Miscellaneous Pins","text":"<p>Below are some additional pins that are broken out for the BNO086.</p> <ul> <li>RST \u2014 The reset signal pin is an input pin and it is active low. Pull it low to reset the IC. You can find this on both sides of the board.</li> <li>INT \u2014 The interrupt pin is an output pin and active low. When BNO080 is ready for communication, it will pull this pin low.</li> <li>WAK \u2014 The wake signal pin is an input pin and it is active low. Pull it low to wake the BNO086's processor from sleep mode.</li> <li>BOOT \u2014 The BOOT pin next to the Qwiic connector is necessary for configuration of the communication mode. If the BOOT pin is low upon reset or power up, the chip will go into bootloader mode to allow for programming of new firmware.</li> </ul>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>There are a few jumper pads available on the top and bottom of the board. Most of the jumpers are on the bottom. For more information on modifying the jumpers, check out our tutorial on working with jumper pads and PCB traces.</p> <ul> <li>I2C \u2014 On the top side of the board, the I<sup>2</sup>C jumpers are closed by default. By cutting the traces between the jumper pads, it will disconnect to the 2.2k\u03a9 pull-up resistors for the I<sup>2</sup>C bus. Most of the time you can leave these alone unless your project requires you to connect the pull-up resistors.</li> <li>LED \u2014 On the bottom side of the board, the LED jumper is closed by default. Cut this trace to disable the power LED that is connected to 3.3V.</li> <li>ADR \u2014 On the bottom side of the board, the address pin selects the I<sup>2</sup>C address of the BNO086 and it is open by default. As indicated by the silkscreen, the address is currently <code>0x48</code>. To change the address to the alternative value of <code>0x4A</code>, simply add a solder blob between the two pads. Make sure to also modify your code to adjust for the alternative address.</li> <li>PS0 \u2014 On the bottom side of the board, the PS0 is used with PS1. The acronym stands for Protocol Selection and it is used for the configuration of the communication interface. It is open by default (i.e. 0). Adding a solder blob on either will change the configuration from I<sup>2</sup>C to UART-RVC, UART, or SPI. Check out the table below to configure the jumpers.</li> <li>PS1 \u2014 On the bottom side of the board, the PS is used with PS0. The acronym stands for Protocol Selection and it is used for the configuration of the communication interface. It is open by default (i.e. 0). Adding a solder blob on either will change the configuration from I<sup>2</sup>C to UART-RVC, UART, or SPI. Check out the table below to configure the jumpers.</li> </ul> <p>You can use the PS0 and PS1 jumpers to change the communication protocol that the BNO080 is using. The jumpers are left open (0) by default, and the following configurations will allow for their corresponding communications protocols.</p> PS0              PS1              Interface              0              0              I<sup>2</sup>C               1              0              UART-RVC              0              1              UART              1              1              SPI"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.0\" x 1.2\" (25.4mm x 30.48mm), which is slightly longer than a typical 1.0\"x1.0\" Qwiic sized board. There are 2x mounting holes on one side of the board.</p>"},{"location":"introduction/","title":"Introduction","text":"<p>Info</p> <p>This tutorial is an update to the BNO080. If you are looking for the original tutorial for the BNO080, make sure to head to the Qwiic VR IMU (BNO080) Hookup Guide. Note that the BNO080 is EOL. Additionally, this tutorial uses a different Arduino Library.</p> <p>CEVA's BNO086, a combination triple-axis accelerometer/gyro/magnetometer System in Package (SiP), packaged with a 32-bit ARM\u00a9 Cortex\u2122 M0+. The BNO086 Inertial Measurement Unit (IMU) produces accurate rotation vector headings, excellently suited for VR and other heading applications, with a static rotation error of two degrees or less. The VR IMU is exactly what we\u2019ve been waiting for: all the sensor data is combined and drift-corrected into meaningful, accurate IMU information. It\u2019s perfect for any project that needs to sense orientation or motion. We've taken this IMU and stuck it on a Qwiic enabled breakout board, in order to make interfacing with the tiny, QFN package a bit easier to connect.</p> <p> <ul> <li> <p> </p> <p> SparkFun VR IMU Breakout - BNO086 (Qwiic)    SEN-22857    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>In this hookup guide, we'll connect our sensor up to our microcontroller of choice and separately read the rotation vectors (which is what we will mainly want), acceleration vectors, gyro values, and magnetometer vectors. We'll check out how to implement the step counter on the BNO086 in order to use it as a pedometer. We'll also read Q values from the sensor. Knowing what activity you're performing is important so we'll learn how to classify what activity the IMU is performing (i.e. Sitting still, moving, biking, walking, running, etc...) and how confident the IMU is that each activity is being performed. Printing out raw packets will also be examined for debugging purposes. Finally, we'll examine how to configure the sensor on different I<sup>2</sup>C ports and addresses. A bonus example is provided in Processing to show us how to use quaternion data to orient a cube.</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board [WRL-19177]</li> <li>1x USB-C cable<ul> <li>Our USB 2.0 A to C Cable [CAB-15092] will do nicely</li> <li>Our USB 3.1 A to C Cable [CAB-14743] is a good choice too</li> </ul> </li> <li>1x SparkFun VR IMU Breakout - BNO086 (Qwiic) [SEN-22857]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 100mm [PRT-17259]</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257]</li> </ul> </li> <li>2x IC Hooks (optional for advanced configuration)<ul> <li>The pack of 5x IC Hook with Pigtail [CAB-09741] for a temporary connection</li> </ul> </li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15092 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun VR IMU Breakout - BNO086 (Qwiic)    SEN-22857 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 100mm    PRT-17259 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <p>Note</p> <p>As of Arduino Library v1.0.3, the BNO086 has also been tested to work with a SAMD51 (i.e. SparkFun Thing Plus - SAMD51) as well!</p>"},{"location":"introduction/#tools","title":"Tools","text":"<p>For a secure connection when connecting to the reset and interrupt pins, you will need to solder two wires between your microcontroller and the breakout board. This requires some assembly and soldering. You may already have a few of these items but if not, the tools and hardware below help with that assembly.</p> <ul> <li>Hook-Up Wire - Assortment (Stranded, 22 AWG) [PRT-11375]</li> <li>Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded) [TOL-22263]</li> <li>Soldering Iron [TOL-14456]</li> <li>Solder Lead Free - 15-gram Tube [TOL-9163]</li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded)    TOL-22263 </p> </li> </ul> <ul> <li> <p> </p> <p> Soldering Iron - 60W (Adjustable Temperature)    TOL-14456 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> Gyroscope </p> </li> </ul> <ul> <li> <p> </p> <p> Accelerometer Basics </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Communication </p> </li> </ul> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Terminal Basics </p> </li> </ul> <ul> <li> <p> </p> <p> Installing an Arduino Library </p> </li> </ul> <ul> <li> <p> </p> <p> Connecting Arduino to Processing </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul>"},{"location":"processing_example/","title":"Processing Example","text":"<p>This section is a fun bonus example that rotates a cube in Processing based on the BNO086's sensor rotation vector's readings. This extra example is not included in the SparkFun VR IMU BNO08X Arduino Library as it requires Processing. To grab it, go ahead and download or clone the SparkFun VR IMU Breakout BNO086 QWIIC hardware repo.</p> Download SparkFun VR IMU Breakout - BNO086 Qwiic GitHub Hardware Repo (ZIP) <p>Note</p> <p>The modified Arduino example has been updated to reflect the changes in Arduino Library v1.0.3.</p>"},{"location":"processing_example/#upload-modified-arduino-example-1s-rotation-vector","title":"Upload Modified Arduino Example 1's Rotation Vector","text":"<p>Processing listens for serial data, so we'll need to get our Arduino (i.e. RedBoard IoT - ESP32) to produce serial data that makes sense to Processing. For this case, we will be using the example 1's rotation vector. However, we will be modifying it by sending only the comma separated values to the serial port.</p> <p>After unzipping the compressed files, navigate to the hardware repo's folder and open the example: ... SparkFun_VR_IMU_Breakout_BNO086_QWIIC &gt; Software &gt; Arduino &gt; Example_01_RotationVector_MOD &gt; Example_01_RotationVector_MOD.ino. This modified sketch simply prints a list of our quaternions separated by a comma over serial for Processing to listen to. You will also notice that the sequence of values is adjusted slightly for the Processing by moving the Real before the real value before i, j, and k. We also adjusted the baud rate to allow Processing some time to process the data.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on. Then click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 9600.</p>"},{"location":"processing_example/#run-the-serial-cube-rotate-processing-demo","title":"Run the \"Serial Cube Rotate\" Processing Demo","text":"<p>Once this sketch is uploaded, we need to tell Processing how to turn this data into a visualization. The Processing sketch to do this is located one folder above the Arduino sketch: ... SparkFun_VR_IMU_Breakout_BNO086_QWIIC &gt; Software &gt; Processing &gt; Serial_Cube_Rotate.pde. Open the Serial_Cube_Rotate.pde file in Processing.</p> <p>Attempting to run the Processing sketch will show us available serial ports in the debug window from this line of code:</p> <pre><code>myPort = new Serial(this, Serial.list()[0], 9600);\n</code></pre> <p>Identify which serial port your Arduino is on. For instance, my RedBoard IoT - ESP32 is on COM17, which corresponds to <code>[6]</code> in the image below, so I will need to change <code>0</code> to <code>6</code> in the following line to ensure Processing is listening to the correct serial port.</p> <p>Once we've done this, we should be able to run the Processing sketch and it will give us a nice visualization of how our IMU is oriented in 3D space as a cube. Try rotating the IMU to see how it responds. You should get a neat little output like the one in the below GIF with Nick Poole's hand.</p>"},{"location":"processing_library/","title":"Installing the Processing Library","text":"<p>Note</p> <p>Processing is a software that enables visual representation of data, among other things. If you've never dealt with Processing before, we recommend you also check out the Arduino to Processing tutorial. Follow the below button to download and install Processing.</p> <p>Download Processing IDE</p> <p>Note</p> <p>At the time of writing this tutorial, we used Arduino IDE v2.1.1 and SparkFun VR IMU BNO08X Arduino Library v1.0. We also used Processing IDE v3.5.3 and toxiclibs Processing Library v0021. We also tested the demo and verified that it works with Processing v4.3.</p>"},{"location":"processing_library/#manually-install-the-toxiclibs-processing-library-v0021","title":"Manually Install the toxiclibs Processing Library v0021","text":"<p>Note</p> <p>We were unable to search for the toxiclibs in Processing's Contribution Manager in order to automatically install the library. Instead, we manually installed the Processing Library.</p> <p>Before running the \"Serial Cube Rotate\" processing demo, you will also need to manually install the ToxicLibs Processing Library v0021 by \"Karsten Schmidt\". This is a library used for computational design. Head to the v0021 release and download \"toxiclibs-complete-0021.zip\".</p> Download Toxiclibs Processing Library v0021 <p>Similar to an Arduino Library, there is a certain file structure that Processing requires to properly install a Processing Library. After downloading, unzip the files and open the toxiclibs-complete-0021 folder. For Windows, copy all the contents of the folder (except for _MACOSX) into the Processing's libraries folder (in this case, C:\\Users...\\Documents\\Processing\\libraries). Again, we'll assume that you are using Processing IDE v3.5.3.</p>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your SparkFun Qwiic VR IMU Breakout (BNO086) up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>BNO086<ul> <li>Datasheet (PDF)</li> <li>Migration Guide (PDF)</li> <li>Tare Function Usage Guide (PDF)</li> <li>Sensor Hub Transport Protocol (PDF)</li> <li>Sensor Calibration Procedure (PDF)</li> </ul> </li> <li>Fritzing Part</li> <li>Arduino Library - SparkFun's Arduino Library for the BNO08X</li> <li>Processing Library - ToxicLibs v0021</li> <li>GitHub Hardware Repo</li> <li>SFE Product Showcase</li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>Info</p> <p>This tutorial is an update to the BNO080. If you are looking for the original tutorial for the BNO080, make sure to head to the Qwiic VR IMU (BNO080) Hookup Guide. Note that the BNO080 is EOL. Additionally, this tutorial uses a different Arduino Library.</p> <p>CEVA's BNO086, a combination triple-axis accelerometer/gyro/magnetometer System in Package (SiP), packaged with a 32-bit ARM\u00a9 Cortex\u2122 M0+. The BNO086 Inertial Measurement Unit (IMU) produces accurate rotation vector headings, excellently suited for VR and other heading applications, with a static rotation error of two degrees or less. The VR IMU is exactly what we\u2019ve been waiting for: all the sensor data is combined and drift-corrected into meaningful, accurate IMU information. It\u2019s perfect for any project that needs to sense orientation or motion. We've taken this IMU and stuck it on a Qwiic enabled breakout board, in order to make interfacing with the tiny, QFN package a bit easier to connect.</p> <p> <ul> <li> <p> </p> <p> SparkFun VR IMU Breakout - BNO086 (Qwiic)    SEN-22857    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>In this hookup guide, we'll connect our sensor up to our microcontroller of choice and separately read the rotation vectors (which is what we will mainly want), acceleration vectors, gyro values, and magnetometer vectors. We'll check out how to implement the step counter on the BNO086 in order to use it as a pedometer. We'll also read Q values from the sensor. Knowing what activity you're performing is important so we'll learn how to classify what activity the IMU is performing (i.e. Sitting still, moving, biking, walking, running, etc...) and how confident the IMU is that each activity is being performed. Printing out raw packets will also be examined for debugging purposes. Finally, we'll examine how to configure the sensor on different I<sup>2</sup>C ports and addresses. A bonus example is provided in Processing to show us how to use quaternion data to orient a cube.</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun IoT RedBoard - ESP32 Development Board [WRL-19177]</li> <li>1x USB-C cable<ul> <li>Our USB 2.0 A to C Cable [CAB-15092] will do nicely</li> <li>Our USB 3.1 A to C Cable [CAB-14743] is a good choice too</li> </ul> </li> <li>1x SparkFun VR IMU Breakout - BNO086 (Qwiic) [SEN-22857]</li> <li>1x Qwiic Cable<ul> <li>Flexible Qwiic Cable - 100mm [PRT-17259]</li> <li>Flexible Qwiic Cable - 500mm [PRT-17257]</li> </ul> </li> <li>2x IC Hooks (optional for advanced configuration)<ul> <li>The pack of 5x IC Hook with Pigtail [CAB-09741] for a temporary connection</li> </ul> </li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15092 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun VR IMU Breakout - BNO086 (Qwiic)    SEN-22857 </p> </li> </ul> <ul> <li> <p> </p> <p> Flexible Qwiic Cable - 100mm    PRT-17259 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <p>Note</p> <p>As of Arduino Library v1.0.3, the BNO086 has also been tested to work with a SAMD51 (i.e. SparkFun Thing Plus - SAMD51) as well!</p>"},{"location":"single_page/#tools","title":"Tools","text":"<p>For a secure connection when connecting to the reset and interrupt pins, you will need to solder two wires between your microcontroller and the breakout board. This requires some assembly and soldering. You may already have a few of these items but if not, the tools and hardware below help with that assembly.</p> <ul> <li>Hook-Up Wire - Assortment (Stranded, 22 AWG) [PRT-11375]</li> <li>Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded) [TOL-22263]</li> <li>Soldering Iron [TOL-14456]</li> <li>Solder Lead Free - 15-gram Tube [TOL-9163]</li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded)    TOL-22263 </p> </li> </ul> <ul> <li> <p> </p> <p> Soldering Iron - 60W (Adjustable Temperature)    TOL-14456 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> Gyroscope </p> </li> </ul> <ul> <li> <p> </p> <p> Accelerometer Basics </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Communication </p> </li> </ul> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Terminal Basics </p> </li> </ul> <ul> <li> <p> </p> <p> Installing an Arduino Library </p> </li> </ul> <ul> <li> <p> </p> <p> Connecting Arduino to Processing </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>Let's look over a few characteristics of the BNO086 sensor so we know a bit more about how it behaves. These characteristics were taken from the datasheet. For more information, make sure to check out the datasheet that is linked in the Resources section.</p> <ul> <li>I<sup>2</sup>C (Default): Up to 400kHz</li> <li>SPI: Up to 3MHz</li> <li>UART: 3Mbps</li> <li>Rotation Vector<ul> <li>Dynamic Error: 3.5\u00b0</li> <li>Static Error: 2.0\u00b0</li> </ul> </li> <li>Gaming Rotation Vector<ul> <li>Dynamic Error: 2.5\u00b0</li> <li>Static Error: 1.5\u00b0</li> <li>Dynamic Heading Drift: 0.5\u00b0 / min</li> </ul> </li> <li>Geomagnetic Rotation Vector<ul> <li>Dynamic Rotation Error: 4.5\u00b0</li> <li>Static Rotation Error: 3.0\u00b0</li> </ul> </li> <li>Gravity Angle Error: 1.5\u00b0</li> <li>Linear Acceleration Accuracy: 0.35m/s<sup>2</sup></li> <li>Accelerometer Accuracy: 0.3m/s<sup>2</sup></li> <li>Gyroscope Accuracy: 3.1\u00b0 / sec</li> <li>Magnetometer Accuracy: 1.4\u00b5T</li> </ul> <p>Note</p> <p>Keep in mind the location of the labels on the top and bottom of the board. When rotating the board about the x-axis to view the bottom labels, you will notice that the letters are not right side up. You will need to rotate the board about the y-axis to view the letters.  </p>"},{"location":"single_page/#power","title":"Power","text":"<p>The operating voltage is between 2.4V-3.6V (note that V<sub>DDIO</sub> and V<sub>DD</sub> are tied together on the breakout board). We will assume that users will be using this with the Qwiic Connect System and a 3.3V microcontroller, which is typically 3.3V. We recommend matching the logic levels so that they are the same as the operating voltage (e.g. 3.3V).  You can apply 3.3V to the board from the 3V3 pin on either edge of the board, in the middle of the board, or either of the Qwiic connectors. There are also a few GND pins located throughout the board and via the Qwiic connectors.</p>"},{"location":"single_page/#i2c-and-qwiic-connectors","title":"I<sup>2</sup>C and Qwiic Connectors","text":"<p>The board includes two Qwiic connectors on each side of the board. For users that need to solder directly to the board, the pins are also broken out on the edge PTH. The I<sup>2</sup>C data and clock lines are also tied to 2.2k\u03a9 pull-up resistors. The BNO086 supports standard fast mode and can communicate over this interface at up to 400kHz.</p> <p>The default address of the board is set to 0x4B. The alternative address is 0x4A. The protocol selection is also set for I<sup>2</sup>C by default. These can be adjusted based on the jumpers on the back of the board. For more information, check out the section about the jumpers.</p> <p>Note</p> <p>The timing for the BNO086 is finicky on the I<sup>2</sup>C port and the Arduino Library v1.0 does not currently support more than one BNO086 on the same line. We also do not recommend using a Qwiic Mux between the microcontroller and BNO086 to ensure that the packets are sent reliably.</p>"},{"location":"single_page/#spi","title":"SPI","text":"<p>A few of the SPI pins have more than one function. We'll focus on the four SPI pins below. The image will also highlight the pins that are tied together.</p> <ul> <li>SO \u2014 This is an output pin for POCI (Peripheral Out, Controller In). The device sends data to the controller on this line. This is also connected to the I<sup>2</sup>C's SDA and UART's TXO pin.</li> <li>SI \u2014 This is an input pin for the PICO (Peripheral In, Controller Out). Device receives data from the microcontroller on this line. This is also connected to the address jumper. Tie to 3.3V to change I<sup>2</sup>C address from 0x4A to 0x4B.</li> <li>SCK \u2014 This is an input for the SPI clock. This is also connected to the I<sup>2</sup>C's SCL and UART's RXI pin.</li> <li>CS \u2014 This is an input for the SPI chip select pin and active low. It is used to as a clock signal to synchronize controller and peripheral.</li> </ul> <p>The protocol selection is set for I<sup>2</sup>C by default. You will need to adjust the jumpers on the back of the board for SPI. For more information, check out the section about the jumpers.</p> <p>Note</p> <p>You may not recognize the PICO/POCI labels for SPI pins. SparkFun has joined with other members of OSHWA in a resolution to move away from using \"Master\" and \"Slave\" to describe signals between the controller and the peripheral. Check out this pagefor more on our reasoning behind this change. You can also see OSHWA's resolution here.</p> <p>Note</p> <p>The Arduino Library is focused more on I<sup>2</sup>C compared to the SPI protocol. To browse a few of the examples that are available, make sure to check out the SPI folder after installing the Arduino Library.</p>"},{"location":"single_page/#uart","title":"UART","text":"<p>In the middle of the board, are the serial UART pins. You can also use the UART interface at up to 3 Mbps or a simplified UART called UART-RVC (Used for Robotic Vacuum Cleaners) which can run at a data rate of 115200 kbps. These serial pins have been arranged to work with our Serial Basic board to make interfacing to a computer simple and fast.  This is for users that want to connect to a 3.3V UART-to-Serial converter (such as the Serial Basic Breakouts). The GRN and BLK labels help align the serial connection properly. The UART pins have more than one function. We'll focus on the two UART pins below. The image will also highlight the pins that are tied together.</p> <ul> <li>TXO \u2014 This is an output pin for serial UART transmit pin. Data is sent out to the microcontroller to this pin. This is also connected to the I<sup>2</sup>C's SDA and SPI's POCI pin.</li> <li>RXI \u2014 This is an input pin for the serial UART receive pin. Data is received from the microcontroller to this pin. This is also connected to the I<sup>2</sup>C's SCL and SPI's SCK pin.</li> </ul> <p>The protocol selection is set for I<sup>2</sup>C by default. You will need to adjust the jumpers on the back of the board for the serial UART. For more information, check out the section about the jumpers.</p>"},{"location":"single_page/#reference-axis","title":"Reference Axis","text":"<p>For easy reference, we've documented the IMU's vectors with 3D Cartesian coordinate axes on the top and bottom side of the board. Make sure to orient and mount the board correctly so you know which way the BNO086's data is pointing. Remember, it's all relative.</p>"},{"location":"single_page/#led","title":"LED","text":"<p>There is one LED on the board. The LED lights up when the board is powered with 3.3V. There is a jumper on the back if you decide to disable the LED.</p>"},{"location":"single_page/#miscellaneous-pins","title":"Miscellaneous Pins","text":"<p>Below are some additional pins that are broken out for the BNO086.</p> <ul> <li>RST \u2014 The reset signal pin is an input pin and it is active low. Pull it low to reset the IC. You can find this on both sides of the board.</li> <li>INT \u2014 The interrupt pin is an output pin and active low. When BNO080 is ready for communication, it will pull this pin low.</li> <li>WAK \u2014 The wake signal pin is an input pin and it is active low. Pull it low to wake the BNO086's processor from sleep mode.</li> <li>BOOT \u2014 The BOOT pin next to the Qwiic connector is necessary for configuration of the communication mode. If the BOOT pin is low upon reset or power up, the chip will go into bootloader mode to allow for programming of new firmware.</li> </ul>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>There are a few jumper pads available on the top and bottom of the board. Most of the jumpers are on the bottom. For more information on modifying the jumpers, check out our tutorial on working with jumper pads and PCB traces.</p> <ul> <li>I2C \u2014 On the top side of the board, the I<sup>2</sup>C jumpers are closed by default. By cutting the traces between the jumper pads, it will disconnect to the 2.2k\u03a9 pull-up resistors for the I<sup>2</sup>C bus. Most of the time you can leave these alone unless your project requires you to connect the pull-up resistors.</li> <li>LED \u2014 On the bottom side of the board, the LED jumper is closed by default. Cut this trace to disable the power LED that is connected to 3.3V.</li> <li>ADR \u2014 On the bottom side of the board, the address pin selects the I<sup>2</sup>C address of the BNO086 and it is open by default. As indicated by the silkscreen, the address is currently <code>0x48</code>. To change the address to the alternative value of <code>0x4A</code>, simply add a solder blob between the two pads. Make sure to also modify your code to adjust for the alternative address.</li> <li>PS0 \u2014 On the bottom side of the board, the PS0 is used with PS1. The acronym stands for Protocol Selection and it is used for the configuration of the communication interface. It is open by default (i.e. 0). Adding a solder blob on either will change the configuration from I<sup>2</sup>C to UART-RVC, UART, or SPI. Check out the table below to configure the jumpers.</li> <li>PS1 \u2014 On the bottom side of the board, the PS is used with PS0. The acronym stands for Protocol Selection and it is used for the configuration of the communication interface. It is open by default (i.e. 0). Adding a solder blob on either will change the configuration from I<sup>2</sup>C to UART-RVC, UART, or SPI. Check out the table below to configure the jumpers.</li> </ul> <p>You can use the PS0 and PS1 jumpers to change the communication protocol that the BNO080 is using. The jumpers are left open (0) by default, and the following configurations will allow for their corresponding communications protocols.</p> PS0              PS1              Interface              0              0              I<sup>2</sup>C               1              0              UART-RVC              0              1              UART              1              1              SPI"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.0\" x 1.2\" (25.4mm x 30.48mm), which is slightly longer than a typical 1.0\"x1.0\" Qwiic sized board. There are 2x mounting holes on one side of the board.</p>"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":"<p>Note</p> <p>Unfortunately, users are not able to use an Arduino Uno or RedBoard with an ATmega328P due the demands of the BNO086 IC. We recommend using the ESP32.</p> <p>The Arduino Library was also tested to work with the SAMD51 as well! The pin connections between the microcontroller and sensor are the same, just make sure to reference the port name rather than the specific Arduino pin number. Make sure to also install the Arduino SAMD core and select the correct board definition.</p>"},{"location":"single_page/#connecting-via-qwiic-port-reset-interrupt-pins","title":"Connecting via Qwiic Port, Reset, &amp; Interrupt Pins","text":"<p>Note</p> <p>As of v1.0.3, you will need to wire up the reset and interrupt pins. Using only the I<sup>2</sup>C port was not sufficient enough to get the BNO086 to work reliably with a microcontroller.  </p> <p>The I/O pins have also been changed for the reset and interrupt pins! Make sure to adjust your connections accordingly.</p> <p>You will need a powerful microcontroller to process the data when using the BNO086. In this case, we used an ESP32 (we specifically tested the Arduino Library with the SparkFun IoT RedBoard - ESP32). Besides connecting a Qwiic cable, you also need to wire up the reset and interrupt pins. This is a more reliable connection and is recommended.</p> <p>The table and image below shows the connections between the SparkFun IoT RedBoard - ESP32 and the BNO086. While you can use IC hooks for a temporary connection, we recommending soldering for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> RedBoard IoT - ESP32              VR IMU Breakout - BNO086              3.3V (3.3V, Qwiic Port) 3.3V GND (GND, Qwiic Port) GND SCL (D22, Qwiic Port) SCL SDA (D21, Qwiic Port) SDA A4 INT A5 RST <p>Note</p> <p>For users using a different communication protocol, make sure to adjust the solder joints for PS0 and PS1 before connecting to a UART or SPI port.</p>"},{"location":"single_page/#connecting-via-uart","title":"Connecting via UART","text":"<p>For users interested in using the serial UART protocol to communicate with the sensor through a computer's USB port, you can connect a serial-to-USB connector directly to the board.</p> <p>Before connecting, make sure to add a solder jumper on PS1 to configure the board for UART protocol as stated earlier in the Hardware Overview.</p> PS0              PS1              Interface              Note              0              0              I<sup>2</sup>C              1              0              UART-RVC              0 1 UART Add solder blob to the jumper to set to 1. 1              1              SPI              <p>The table below shows how to connect the VR IMU Breakout BNO086's UART port to a Serial Basic. You can angle header pins against the PTHs and hold the boards together with one hand for a temporary connection. However, we recommending soldering to the connection for a reliable and secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> VR IMU Breakout - BNO086              3.3V Serial Basic              Wire Color              GND GND BLK CTS 3V3 3.3V RXI TXO TXO RXI DTR GRN <p>Note</p> <p>You will need to be careful when soldering header pins to the edge pins and the UART located at the center of the board. For users that solder header pins to the edge of the board to mate with a breadboard, you will need to solder header pins facing the other way for the UART header so that the center pins do not connect to the same rails. The same goes with users that are using right angle header pins as well.</p> <p>Of course, you can cut a six wire jumper wire cable and wire strip them before connecting to the 1x6 header as well.</p> <p>The UART interface is in the middle of the board, with the black and green pins labeled as BLK and GRN. As stated earlier, these serial pins have been arranged to work with our Serial Basic board to make interfacing to a computer simple and fast. Once the header pins are soldered, align the GRN and BLK labels so that the serial connection is properly connected and slide the male header pins into the female header sockets.</p>"},{"location":"single_page/#connecting-via-spi","title":"Connecting via SPI","text":"<p>For users interested in using the SPI protocol to communicate with the sensor, there are few examples in the Arduino Library. You can use those examples as a basis to adjust the I<sup>2</sup>C examples to use it with SPI.</p> <p>Before connecting, make sure to add a solder jumper on PS0 and PS1 to configure the board for SPI protocol as stated earlier in the Hardware Overview.</p> <p>Note</p> <p>As of v1.0.3, the I/O pins have also been changed for the CS, reset, interrupt pins! Make sure to adjust your connections accordingly.</p> PS0              PS1              Interface              Note              0              0              I<sup>2</sup>C              1              0              UART-RVC              0              1              UART              1 1 SPI Add solder blob to the jumpers to set to 1. <p>The table below shows how to connect the SparkFun IoT RedBoard - ESP32 to the VR IMU Breakout BNO086's SPI port. As stated earlier for the I<sup>2</sup>C, you could use IC hooks for initial testing. However, we recommending soldering to the connection for a reliable and secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> RedBoard IoT - ESP32              VR IMU Breakout - BNO086              3.3V 3.3V GND GND D5 CS PICO (D23) SI POCI (D19) SO SCK (D18) SCK A4 INT A5 RST <p>Note</p> <p>For users that are connecting the BNO086 to a MicroMod Machine Learning Board and MicroMod Artemis Processor, you will need to redefine a few pins. We recommend redefining the following pins in the example code.</p> <pre><code>#define BNO08X_CS   PWM0\n#define BNO08X_INT  D0\n#define BNO08X_RST  D1\n</code></pre> <p>Note that SPI_CS on the MicroMod Machine Learning Board is only routed to the CS pin for the microSD card. D0 is also used as the CS pin for the on-board camera via SPI. D0 will work but if you are using a camera, then this would cause a conflict. A good alternative pin to use in this case would be PWM1.</p> <pre><code>#define BNO08X_CS   PWM0\n#define BNO08X_INT  PWM1\n#define BNO08X_RST  D1\n</code></pre> <p>Additionally, A0 and A1 are meant to be only used as input pins and for ADC. The MicroMod Artemis Processor has op amps and scaling from 3.3V to 3V on both of those analog pins.</p>"},{"location":"single_page/#installing-the-arduino-library","title":"Installing the Arduino Library","text":"<p>Arduino</p> <p>The SparkFun VR IMU BNO08X Arduino Library provides a quick way to interact with the interfaces on the SparkFun VR IMU Breakout - BNO086 (Qwiic). Install the library through the Arduino Library Manager tool by searching for \"SparkFun BNO08X\". Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun VR IMU BNO08X Arduino Library (ZIP) <p>Note</p> <p>This library is different from the original BNO080 Arduino Library. Most of the examples from the old Arduino Library were ported to the BNO08X Arduino Library. We recommend using this library for the BNO08X as it processes the data better.</p>"},{"location":"single_page/#arduino-ide","title":"Arduino IDE","text":"<p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE and an library, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"single_page/#board-definitions","title":"Board Definitions","text":"<p>For the scope of this tutorial, we will be using the SparkFun IoT RedBoard - ESP32 Development Board. This Library also works with the SAMD51. For users that decide to use the SAMD51, make sure to use the Arduino SAMD Core and SparkFun SAMD boards before selecting the SAMD51 board definition.</p> <p>If you have not installed a board definition before, please review the following tutorial as well.</p> <ul> <li>Installing Board Definitions in the Arduino IDE</li> </ul>"},{"location":"single_page/#usb-to-serial-drivers","title":"USB-to-Serial Drivers","text":"<p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p>"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":"<p>Now that we have our library installed, we can get started playing around with our examples to learn more about how the IMU behaves. From there we'll be able to build our own custom code to integrate the sensor into a project.</p> <p>Note</p> <p>As of Arduino Library v1.0.3, the following line of code has been included for microcontrollers with built-in native USB (i.e. the SAMD51). This can be commented out when using the BNO086 in projects that are not using a Serial Terminal.</p> <p><pre><code>while(!Serial) delay(10); // Wait for Serial to become available.\n// Necessary for boards with native USB (like the SAMD51 Thing+).\n// For a final version of a project that does not need serial debug (or a USB cable plugged in),\n// Comment out this while loop, or it will prevent the remaining code from running.</code></pre></p>"},{"location":"single_page/#example-1-rotation-vector","title":"Example 1 - Rotation Vector","text":"<p>This first example gets us started taking a reading of our complex valued rotation vector, or quaternion, which tells us how we are oriented. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_01_RotationVector.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>You should see an output of the quaternion values (i.e. i, j, k, and real) and the accuracy in radians.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"single_page/#example-2-accelerometer","title":"Example 2 - Accelerometer","text":"<p>Examples 2 deals with pulling the accelerometer values from our sensor to figure out how it is moving. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_02_Accelerometer.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>You should see an output of the accelerometer values for x, y, and z in m/s<sup>2</sup>. If the breakout board is on the table with the z-axis pointed up to the ceiling, you should see a value close to the value of about +9.81 m/s. Of course, that value can vary depending on where you are on Earth](https://en.wikipedia.org/wiki/Gravity_of_Earth) or if the board is not fully rested on a flat table.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"single_page/#example-3-gyro","title":"Example 3 - Gyro","text":"<p>In example 3, we'll pull values from the IMU's gyroscope to get a vector for our angular velocity. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_03_Gyro.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>You should see the angular velocity for x, y, and z in radians/s. Try rotating the board about each axis. You should see the values change depending on the direction that you rotate the board.</p> <p>Also, check out the values in a graph by opening the Serial Plotter to the same baud rate to see the readings from each gyroscope channel plotted against each other. Rotate the IMU and see how the values respond, I got the following output just letting the IMU swing on its cable.</p> <p>Note</p> <p>The range for the Arduino Serial Plotter along x-axis is a bit limited in Arduino IDE v2+ as opposed to previous versions like Arduino v1.8.19. There is a feature request relating to the Arduino Serial Plotter in the GitHub repo for the Arduino IDE. If you would like a bigger range, try opening the Arduino Serial Plotter in an older Arduino IDE like Arduino v1.8.19. Just make sure to adjust the baud rate to 115200.</p> <p> </p>"},{"location":"single_page/#example-4-magnetometer","title":"Example 4 - Magnetometer","text":"<p>The following example will get us reading the component vectors for the magnetic field. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_04_Magnetometer.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>You should see the magnetometer values for x, y, and z in \u00b5Tesla and the accuracy. Try moving the magnetometer around aligning the sensor with the North Pole. You can also try placing a weak magnet near the sensor to see the values increase. In this case, I placed a weak magnet which increased the magnitude of the field along the z-axis.</p> Having a hard time seeing output? Click on the image for a closer look. <p>Warning</p> <p>Note that you will want to be careful about placing the sensor too close to a magnet (especially a strong magnet) as this can potentially damage the sensor.</p>"},{"location":"single_page/#example-5-step-counter","title":"Example 5 - Step Counter","text":"<p>The BNO080 has some really neat built-in features due to its built in Cortex. One of these is a built in step counter. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_05_StepCounter.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>Try holding the sensor or attaching to your body while connect to a laptop and walk around. You should see a value close to the number of steps that you have taken. In this case, I just walked away from my table and back.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"single_page/#example-6-stability-classifier","title":"Example 6 - Stability Classifier","text":"<p>This example sketch allows us to use the built-in stability classifier to figure out how stable the IMU is. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_06-StabilityClassifier.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>Give the BNO086 a second to measure and process the sensor values. The sensor will provide an output classifying an activity. In the output below, the sensor determined that the board was resting on a table... which it was! Amazing!</p> Having a hard time seeing output? Click on the image for a closer look. <p>As stated in the datasheet, the sensor uses both the accelerometer and gyroscope to determine the sensor's stability: on table, stationary, stable, motion. If the sensor does not know what is happening, the output will tell you that it was an \"unknown classification.\"</p>"},{"location":"single_page/#example-7-activity-classifier","title":"Example 7 - Activity Classifier","text":"<p>The activity classifier is somewhat similar to the stability classifier in that it uses the on-board Cortex to determine what activity the IMU is doing. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_07_ActivityClassifier.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> <p>Give the BNO086 a second to measure and process the sensor values. The sensor will provide an output classifying an activity and how confident it was. In the output below, the sensor determined that I was on the move and walking around my desk, which I was!</p> Having a hard time seeing output? Click on the image for a closer look. <p>The BNO086 can determine the following activities:</p> <ul> <li>In vehicle</li> <li>On bicycle</li> <li>On foot</li> <li>Still</li> <li>Tilting</li> <li>Walking</li> <li>Running</li> <li>On stairs</li> </ul> <p>If the sensor is not able to determine what is happening, the output will tell you that it was an \"Unknown.\"</p>"},{"location":"single_page/#example-8-advanced-configuration","title":"Example 8 - Advanced Configuration","text":"<p>This example shows us how to configure the sensor on different addresses and I<sup>2</sup>C buses. Make sure to close the ADR jumper by adding a solder blob. You will also need to manually connect the I<sup>2</sup>C data and clock pins to the alternative port. For a quick test, you could use the Qwiic cable with breadboard jumpers to connect the breakout board to the RedBoard IoT - ESP32's header sockets. Of course, soldering wire directly to the PTH is better for a more secure connection.</p> RedBoard IoT - ESP32              VR IMU Breakout - BNO086              3.3V 3.3V GND GND SCL1 (D17) SCL SDA1 (D25) SDA A4 INT A5 RST <p>Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_08_AdvancedConfig.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"single_page/#example-9-linear-accelerometer","title":"Example 9 - Linear Accelerometer","text":"<p>The following example is similar to example 2, however we are reading the linear acceleration. What does this mean? Well, it's acceleration with gravity (~9.8m/s<sup>2</sup>) removed from the data! Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_09_LinearAccelerometer.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"single_page/#example-10-timestamp","title":"Example 10 - Timestamp","text":"<p>This example is pretty much like example 1. The difference is that we add a timestamp for each rotation vector. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_10_TimeStamp.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"single_page/#example-11-raw-readings","title":"Example 11 - Raw Readings","text":"<p>This example shows how to output the raw acceleration, gyroscope, and magnetometer values. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_11_RawReadings.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"single_page/#example-12-gyro-integrated-rotation-vector","title":"Example 12 - Gyro Integrated Rotation Vector","text":"<p>This example shows how to use the gyro integrated rotation vector. Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_12-GyroIntegratedRotationVector.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"single_page/#example-13-euler-angles","title":"Example 13 - Euler Angles","text":"<p>Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_13_EulerAngles.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"single_page/#example-14-tare","title":"Example 14 - Tare","text":"<p>Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_14_Tare.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"single_page/#example-15-gravity","title":"Example 15 - Gravity","text":"<p>Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_15_Gravity.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"single_page/#example-16-uncalibrated-gyro","title":"Example 16 - Uncalibrated Gyro","text":"<p>Open the example by navigating to File &gt; Examples &gt; SparkFun BNO08X Cortex Based IMU &gt; Example_16_UncalibratedGyro.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200.</p> Having a hard time seeing output? Click on the image for a closer look."},{"location":"single_page/#installing-the-processing-library","title":"Installing the Processing Library","text":"<p>Note</p> <p>Processing is a software that enables visual representation of data, among other things. If you've never dealt with Processing before, we recommend you also check out the Arduino to Processing tutorial. Follow the below button to download and install Processing.</p> <p>Download Processing IDE</p> <p>Note</p> <p>At the time of writing this tutorial, we used Arduino IDE v2.1.1 and SparkFun VR IMU BNO08X Arduino Library v1.0. We also used Processing IDE v3.5.3 and toxiclibs Processing Library v0021. We also tested the demo and verified that it works with Processing v4.3.</p>"},{"location":"single_page/#manually-install-the-toxiclibs-processing-library-v0021","title":"Manually Install the toxiclibs Processing Library v0021","text":"<p>Note</p> <p>We were unable to search for the toxiclibs in Processing's Contribution Manager in order to automatically install the library. Instead, we manually installed the Processing Library.</p> <p>Before running the \"Serial Cube Rotate\" processing demo, you will also need to manually install the ToxicLibs Processing Library v0021 by \"Karsten Schmidt\". This is a library used for computational design. Head to the v0021 release and download \"toxiclibs-complete-0021.zip\".</p> Download Toxiclibs Processing Library v0021 <p>Similar to an Arduino Library, there is a certain file structure that Processing requires to properly install a Processing Library. After downloading, unzip the files and open the toxiclibs-complete-0021 folder. For Windows, copy all the contents of the folder (except for _MACOSX) into the Processing's libraries folder (in this case, C:\\Users...\\Documents\\Processing\\libraries). Again, we'll assume that you are using Processing IDE v3.5.3.</p>"},{"location":"single_page/#processing-example","title":"Processing Example","text":"<p>This section is a fun bonus example that rotates a cube in Processing based on the BNO086's sensor rotation vector's readings. This extra example is not included in the SparkFun VR IMU BNO08X Arduino Library as it requires Processing. To grab it, go ahead and download or clone the SparkFun VR IMU Breakout BNO086 QWIIC hardware repo.</p> Download SparkFun VR IMU Breakout - BNO086 Qwiic GitHub Hardware Repo (ZIP) <p>Note</p> <p>The modified Arduino example has been updated to reflect the changes in Arduino Library v1.0.3.</p>"},{"location":"single_page/#upload-modified-arduino-example-1s-rotation-vector","title":"Upload Modified Arduino Example 1's Rotation Vector","text":"<p>Processing listens for serial data, so we'll need to get our Arduino (i.e. RedBoard IoT - ESP32) to produce serial data that makes sense to Processing. For this case, we will be using the example 1's rotation vector. However, we will be modifying it by sending only the comma separated values to the serial port.</p> <p>After unzipping the compressed files, navigate to the hardware repo's folder and open the example: ... SparkFun_VR_IMU_Breakout_BNO086_QWIIC &gt; Software &gt; Arduino &gt; Example_01_RotationVector_MOD &gt; Example_01_RotationVector_MOD.ino. This modified sketch simply prints a list of our quaternions separated by a comma over serial for Processing to listen to. You will also notice that the sequence of values is adjusted slightly for the Processing by moving the Real before the real value before i, j, and k. We also adjusted the baud rate to allow Processing some time to process the data.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on. Then click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 9600.</p>"},{"location":"single_page/#run-the-serial-cube-rotate-processing-demo","title":"Run the \"Serial Cube Rotate\" Processing Demo","text":"<p>Once this sketch is uploaded, we need to tell Processing how to turn this data into a visualization. The Processing sketch to do this is located one folder above the Arduino sketch: ... SparkFun_VR_IMU_Breakout_BNO086_QWIIC &gt; Software &gt; Processing &gt; Serial_Cube_Rotate.pde. Open the Serial_Cube_Rotate.pde file in Processing.</p> <p>Attempting to run the Processing sketch will show us available serial ports in the debug window from this line of code:</p> <pre><code>myPort = new Serial(this, Serial.list()[0], 9600);\n</code></pre> <p>Identify which serial port your Arduino is on. For instance, my RedBoard IoT - ESP32 is on COM17, which corresponds to <code>[6]</code> in the image below, so I will need to change <code>0</code> to <code>6</code> in the following line to ensure Processing is listening to the correct serial port.</p> <p>Once we've done this, we should be able to run the Processing sketch and it will give us a nice visualization of how our IMU is oriented in 3D space as a cube. Try rotating the IMU to see how it responds. You should get a neat little output like the one in the below GIF with Nick Poole's hand.</p>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p> <p>If you are having problems connecting to the BNO086 and you see the following output after resetting the RedBoard IoT - ESP32 in the Serial Monitor, there could be a few reasons why.</p> <p>If you are using the I<sup>2</sup>C examples, try checking your connections and the Qwiic cable for loose connections. Also, ensure that the correct I<sup>2</sup>C's address jumper is selected as well as the jumpers for the protocol selection. The communication may also be out of sync with the BNO086. You may need to power cycle the board by removing the cable from the connector and reconnecting it.</p> <p>You may also want to try connecting the interrupt and reset pins to the board for a hardware reset. Make sure to check example 17 for more information about modifying the example to include the hardware reset.</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your SparkFun Qwiic VR IMU Breakout (BNO086) up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>BNO086<ul> <li>Datasheet (PDF)</li> <li>Migration Guide (PDF)</li> <li>Tare Function Usage Guide (PDF)</li> <li>Sensor Hub Transport Protocol (PDF)</li> <li>Sensor Calibration Procedure (PDF)</li> </ul> </li> <li>Fritzing Part</li> <li>Arduino Library - SparkFun's Arduino Library for the BNO08X</li> <li>Processing Library - ToxicLibs v0021</li> <li>GitHub Hardware Repo</li> <li>SFE Product Showcase</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p> <p>If you are having problems connecting to the BNO086 and you see the following output after resetting the RedBoard IoT - ESP32 in the Serial Monitor, there could be a few reasons why.</p> <p>If you are using the I<sup>2</sup>C examples, try checking your connections and the Qwiic cable for loose connections. Also, ensure that the correct I<sup>2</sup>C's address jumper is selected as well as the jumpers for the protocol selection. The communication may also be out of sync with the BNO086. You may need to power cycle the board by removing the cable from the connector and reconnecting it.</p> <p>You may also want to try connecting the interrupt and reset pins to the board for a hardware reset. Make sure to check example 17 for more information about modifying the example to include the hardware reset.</p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun VR IMU Breakout - BNO086 (Qwiic) repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun VR IMU Breakout - BNO086 (Qwiic) repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun VR IMU Breakout - BNO086 (Qwiic) repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun VR IMU Breakout - BNO086 (Qwiic) repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}